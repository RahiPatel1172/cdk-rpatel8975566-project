# AWS CloudFormation Template
AWSTemplateFormatVersion: '2010-09-09'
Description: 'AWS CloudFormation Template'

Resources:
  # S3 Bucket for storing files
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${AWS::StackName}-bucket-${AWS::AccountId}'
      # Enable versioning for file history
      VersioningConfiguration:
        Status: Enabled
      # Block all public access for security
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  DynamoTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: !Sub '${AWS::StackName}-table'
      AttributeDefinitions:
        - AttributeName: 'id'
          AttributeType: 'S'
      KeySchema:
        - AttributeName: 'id'
          KeyType: 'HASH'
      BillingMode: 'PAY_PER_REQUEST'

  LambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: !Sub '${AWS::StackName}-lambda'
      Handler: 'index.handler'
      Role: !Sub 'arn:aws:iam::${AWS::AccountId}:role/LabRole'
      Code:
        ZipFile: |
          exports.handler = async (event) => {
            console.log('Lambda executed successfully!');
            return {
              statusCode: 200,
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify({
                message: 'Success',
                timestamp: new Date().toISOString(),
                requestId: event.requestContext?.requestId
              })
            };
          };
      Runtime: 'nodejs18.x'
      Environment:
        Variables:
          BUCKET_NAME: !Ref S3Bucket
          TABLE_NAME: !Ref DynamoTable

Outputs:
  BucketName:
    Description: 'Name of the created S3 bucket'
    Value: !Ref S3Bucket

  TableName:
    Description: 'Name of the created DynamoDB table'
    Value: !Ref DynamoTable

  LambdaFunction:
    Description: 'Name of the created Lambda function'
    Value: !Ref LambdaFunction 